#!/bin/bash

#emoji codes
CHECK_MARK="\033[00;32m\xE2\x9C\x94\033[0m"
X_MARK="\033[00;31m\xE2\x9C\x96\033[0m"
PIN="\033[00;31m\xF0\x9F\x93\x8C\033[0m"
CLOCK="\033[00;32m\xE2\x8C\x9B\033[0m"
ARROW="\033[00;36m\xE2\x96\xB6\033[0m"
BOOK="\033[00;31m\xF0\x9F\x93\x8B\033[0m"
HOT="\033[00;33m\xF0\x9F\x94\xA5\033[0m"
WARNING="\033[00;31m\xF0\x9F\x9A\xA8\033[0m"
RIGHT_ANGLE="\033[00;32m\xE2\x88\x9F\033[0m"

# color codes
RESTORE='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\033[38;5;49m"
LIGHTGRAY='\033[00;37m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

DOTFILES_LOG="$HOME/.dotfiles.log"

# _header colorize the given argument with spacing
function _task {
    if [[ $TASK != "" ]]; then
        printf "${OVERWRITE}${LGREEN} [âœ“]  ${LGREEN}${TASK}\n"
    fi
    TASK=$1
    printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

# _cmd performs commands with error checking
function _cmd {
    if ! [[ -f $DOTFILES_LOG ]]; then
        touch $DOTFILES_LOG
    fi
    >$DOTFILES_LOG
    if eval "$1" 1>/dev/null 2>$DOTFILES_LOG; then
        return 0
    fi
    printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
    while read line; do
        printf "      ${line}\n"
    done <$DOTFILES_LOG
    printf "\n"
    rm $DOTFILES_LOG
    exit 1
}

set -e

CONFIG_DIR="$HOME/.config/dotfiles"
VAULT_SECRET="$HOME/.ansible-vault/vault.secret"
DOTFILES_DIR="$HOME/.dotfiles"
SSH_DIR="$HOME/.ssh"
IS_FIRST_RUN="$HOME/.dotfiles_run"

# Install Ansible
if ! command -v ansible &>/dev/null; then
    _task "Installing Ansible"
    if [[ "$(uname)" == "Darwin" ]]; then
        _cmd "brew install ansible@8"
    elif [[ "$(uname)" == "Linux" ]]; then
        _cmd "sudo apt-get update"
        _cmd "sudo apt-get install -y software-properties-common"
        _cmd "sudo apt-add-repository -y ppa:ansible/ansible"
        _cmd "sudo apt-get update"
        _cmd "sudo apt-get install -y ansible"
        _cmd "sudo apt-get install python3-argcomplete"
        _cmd "sudo activate-global-python-argcomplete3"
    fi
fi

# Check if python3 and pip is installed
if ! command -v python3 &>/dev/null; then
    _task "Installing Python3"
    if [[ "$(uname)" == "Darwin" ]]; then
        _cmd "brew install python"
    elif [[ "$(uname)" == "Linux" ]]; then
        _cmd "sudo apt-get install -y python3"
    fi
fi

if ! command -v pip3 &>/dev/null; then
    _task "Installing Python3 Pip"
    if [[ "$(uname)" == "Darwin" ]]; then
        _cmd "brew install python"
    elif [[ "$(uname)" == "Linux" ]]; then
        _cmd "sudo apt-get install -y python3-pip"
    fi
fi

# Check if pip module watchdog is installed

if [[ "$(uname)" == "Darwin" ]]; then
    if ! pipx list | grep "watchdog" &>/dev/null; then
        _task "Installing Python3 Watchdog"
        _cmd "brew install watchdog"
    fi
else
    if ! pip3 list | grep "watchdog" &>/dev/null; then
        _task "Installing Python3 Watchdog"
        _cmd "python -m pip install watchdog"
    fi
fi

# Generate SSH keys
if ! [[ -f "$SSH_DIR/authorized_keys" ]]; then
    _task "Generating SSH keys"
    _cmd "mkdir -p $SSH_DIR"
    _cmd "chmod 700 $SSH_DIR"
    _cmd "ssh-keygen -b 4096 -t rsa -f $SSH_DIR/id_rsa -N '' -C $USER@$HOSTNAME"
    _cmd "cat $SSH_DIR/id_rsa.pub >> $SSH_DIR/authorized_keys"
fi

# Clone repository
if ! [[ -d "$DOTFILES_DIR" ]]; then
    _task "Cloning repository"
    _cmd "git clone https://github.com/DR-DinoMight/dotfiles.git $DOTFILES_DIR"
else
    _task "Updating repository"
    _cmd "git -C $DOTFILES_DIR pull"
fi

pushd "$DOTFILES_DIR" 2>&1 >/dev/null
_task "Updating Galaxy"
_cmd "ansible-galaxy install -r requirements.yml"

_task "Running playbook"
if [[ -f $VAULT_SECRET ]]; then
    _task "Found Vault - $VALUT_SECRET"
    ansible-playbook --vault-password-file $VAULT_SECRET "$DOTFILES_DIR/main.yml" "$@" --ask-become-pass
else
    _task "No Valut  - $VALUT_SECRET"
    ansible-playbook "$DOTFILES_DIR/main.yml" "$@" --ask-become-pass
fi

popd 2>&1 >/dev/null

if ! [[ -f "$IS_FIRST_RUN" ]]; then
    echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
    echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
    touch "$IS_FIRST_RUN"
fi
